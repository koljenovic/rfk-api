# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WhereType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, column_name: str=None, comparator: str=None, value: str=None):  # noqa: E501
        """WhereType - a model defined in Swagger

        :param column_name: The column_name of this WhereType.  # noqa: E501
        :type column_name: str
        :param comparator: The comparator of this WhereType.  # noqa: E501
        :type comparator: str
        :param value: The value of this WhereType.  # noqa: E501
        :type value: str
        """
        self.swagger_types = {
            'column_name': str,
            'comparator': str,
            'value': str
        }

        self.attribute_map = {
            'column_name': 'column_name',
            'comparator': 'comparator',
            'value': 'value'
        }
        self._column_name = column_name
        self._comparator = comparator
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'WhereType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WhereType of this WhereType.  # noqa: E501
        :rtype: WhereType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_name(self) -> str:
        """Gets the column_name of this WhereType.

        tačan i potpun naziv kolone u tabeli  # noqa: E501

        :return: The column_name of this WhereType.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name: str):
        """Sets the column_name of this WhereType.

        tačan i potpun naziv kolone u tabeli  # noqa: E501

        :param column_name: The column_name of this WhereType.
        :type column_name: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")  # noqa: E501

        self._column_name = column_name

    @property
    def comparator(self) -> str:
        """Gets the comparator of this WhereType.

        operator za poređenje, jedna vrijednost od: * < (lt), > (gt), <= (lte), >= (gte), == (eq), != (neq) * si - parcijalno uparivanje stringova bez obzira na mala i velika slova * s - parcijalno uparivanje stringova uz razlikovanje malih i velikih slova * x - uparivanje stringova korištenjem regularnih izraza (regex)   # noqa: E501

        :return: The comparator of this WhereType.
        :rtype: str
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator: str):
        """Sets the comparator of this WhereType.

        operator za poređenje, jedna vrijednost od: * < (lt), > (gt), <= (lte), >= (gte), == (eq), != (neq) * si - parcijalno uparivanje stringova bez obzira na mala i velika slova * s - parcijalno uparivanje stringova uz razlikovanje malih i velikih slova * x - uparivanje stringova korištenjem regularnih izraza (regex)   # noqa: E501

        :param comparator: The comparator of this WhereType.
        :type comparator: str
        """
        allowed_values = ["lt", "gt", "lte", "gte", "eq", "neq", "si", "s", "x"]  # noqa: E501
        if comparator not in allowed_values:
            raise ValueError(
                "Invalid value for `comparator` ({0}), must be one of {1}"
                .format(comparator, allowed_values)
            )

        self._comparator = comparator

    @property
    def value(self) -> str:
        """Gets the value of this WhereType.

        vrijednost korištena za komparaciju  # noqa: E501

        :return: The value of this WhereType.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this WhereType.

        vrijednost korištena za komparaciju  # noqa: E501

        :param value: The value of this WhereType.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
